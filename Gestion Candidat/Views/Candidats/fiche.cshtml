@model Gestion_Candidat.Models.Candidat

@{
    ViewBag.Title = "Fiche Candidat";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.Partial("_headFichePartial")
    <div class="form-horizontal col-xs-12 col-md-9 pg-0">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-xs-12 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.Civilite, htmlAttributes: new { @class = "control-label col-sm-4", @for = "ListeCiv" })
                <div class="col-sm-7">
                    @Html.DropDownListFor(m => m.Humain.Civilite, (IEnumerable<SelectListItem>)ViewBag.ListeCiv, null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Humain.Civilite, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.Prenom, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.Prenom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.Prenom, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.Nom, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.Nom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.Nom, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.TelMobile, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.TelMobile, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.TelMobile, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.email, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.email, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.Adresse, htmlAttributes: new { @class = "control-label col-sm-4", @for = "ListeCiv" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.Adresse, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.Adresse, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.AdresseComplement, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.AdresseComplement, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.AdresseComplement, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.CodePostal, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.CodePostal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.CodePostal, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.Ville, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.Ville, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.Ville, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Humain.Pays, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Humain.Pays, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Humain.Pays, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-xs-12 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.DtDisponibilite, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.DtDisponibilite, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DtDisponibilite, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LbDisponibilite, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.LbDisponibilite, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LbDisponibilite, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Remuneration, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Remuneration, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Remuneration, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Mobilite, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.Mobilite, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Mobilite, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.InfCom, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.EditorFor(model => model.InfCom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.InfCom, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6">

            <div class="form-group">
                @Html.LabelFor(model => model.TypAction, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.DropDownList("TypAction", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypAction, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TypPriorite, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.DropDownList("TypPriorite", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypPriorite, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TypOrigine, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.DropDownList("TypOrigine", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypOrigine, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TypStatut, htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.DropDownList("TypStatut", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypStatut, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.DisplayName("")
                @Html.Label("TypTdb", "type candidat", htmlAttributes: new { @class = "control-label col-sm-4" })
                <div class="col-sm-7">
                    @Html.DropDownListFor(m => m.RoleCandidat.TypTdb, ((IEnumerable<SelectListItem>)ViewBag.TypTdb), null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RoleCandidat.TypTdb, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="col-xs-12">

            <div class="col-xs-12 col-md-4">
                @Html.LabelFor(model => model.MCEntreprise, htmlAttributes: new { @class = "col-xs-12" })
                <div class="col-xs-12 pg-0">
                    @Html.EditorFor(model => model.MCEntreprise, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MCEntreprise, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-xs-12 col-md-4">
                @Html.LabelFor(model => model.MCFonctionnel, htmlAttributes: new { @class = "col-xs-12" })
                <div class="col-xs-12 pg-0">
                    @Html.EditorFor(model => model.MCFonctionnel, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MCFonctionnel, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-xs-12 col-md-4">
                @Html.LabelFor(model => model.MCTechnique, htmlAttributes: new { @class = "col-xs-12" })
                <div class="col-xs-12 pg-0">
                    @Html.EditorFor(model => model.MCTechnique, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MCTechnique, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        @Html.HiddenFor(m => m.CdHumain, htmlAttributes: new { @value = Model.Humain.CdHumain })
        @Html.HiddenFor(m => m.Humain.CdHumain, htmlAttributes: new { @value = Model.Humain.CdHumain })
        @Html.HiddenFor(m => m.CdCandidat, htmlAttributes: new { @value = Model.CdCandidat })
        @Html.HiddenFor(m => m.CreePar, new { @Value = Model.CreePar })
        @Html.HiddenFor(m => m.DtCreation, new { @Value = Model.DtCreation })
        @Html.HiddenFor(m => m.DtModification, new { @Value = DateTime.Now.ToString() })
        @Html.HiddenFor(m => m.ModifiePar, new { @Value = (string)ViewBag.User })

    </div>
    <div class="col-xs-12 col-md-3 pg-0 mgb-15">
        <h4 class="col-xs-11 pg-0">Tâche(s)</h4><span onclick="toggleNewTache()" class="col-xs-1 pg-0"><span id="plus-tache" class="glyphicon glyphicon-plus btn-plus"></span></span>
        <div class="side-modul side-modul-tache col-xs-12 pg-0">
            <div id="tog-tache" class="col-xs-12 pg-0 newTache hide-gen">
                <div class="col-xs-12 pg-0">
                    <div class="col-xs-6 pg-0">
                        <span class="col-xs-12">Envoyer à </span>
                        @Html.DropDownList("CdReceveur-tache", new SelectList(ViewBag.ListeResp, "Value", "Text", Model.CreePar), new { id = "CdReceveur-tache", @class = "form-control pg-0" })
                    </div>
                    <div class="col-xs-6 pg-0">
                        <span class="col-xs-12">Pour le</span>
                        @Html.TextBox("DtAction-tache", "", new { @class = "form-control" })
                    </div>
                </div>
                <div class="col-xs-12 pg-0">
                    <span class="col-xs-12">Détails</span>
                    @Html.TextArea("Details-tache", "", new { @class = "form-control" })
                </div>
                <span onclick="addTache()" class="col-xs-12 pg-0 h-0"><span class="glyphicon glyphicon-ok btn-plus btn-ok-tache"></span></span>
                @Html.Hidden("CdCandidat-tache", Model.CdCandidat)
            </div>
            @foreach (var item in Model.TacheCandidat.OrderByDescending(t => t.DtAction))
            {
                <div class="col-xs-12 pg-0">
                    <div class="col-xs-12 text-xs infoTache">
                        <span class="pull-right">
                            &ensp;envoyée le @item.DtEnvoi.ToShortDateString()
                        </span>
                        <span class="pull-right">
                            par @item.CdCreateur Pour le @item.DtAction.Value.ToShortDateString()
                        </span>
                    </div>
                    <div class="col-xs-3 statutTache">
                        <span class="col-xs-12 pg-0">A: @item.CdReceveur</span>
                        <span class="col-xs-12 pg-0">Fait @Html.CheckBox(" ", item.Statut, new { @disabled = "disabled" })</span>
                    </div>
                    <div class="col-xs-9 textTache">
                        @item.Details
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-xs-12 col-md-3 pg-0">
        <h4 class="col-xs-11 pg-0">Document(s)</h4><span onclick="toggleNewDoc()" class="col-xs-1 pg-0"><span id="plus-doc" class="glyphicon glyphicon-plus btn-plus"></span></span>
        <div class="side-modul side-modul-doc col-xs-12 pg-0">
            <div id="tog-doc" class="col-xs-12 pg-0 newDoc hide-gen">
                <div class="col-xs-12 pg-0">
                    <div class="col-xs-4 pg-0">
                        <span class="col-xs-12">Type </span>
                        @Html.DropDownList("TypFichier-doc", new SelectList(ViewBag.ListeFichier, "Value", "Text"), new { id = "TypFichier-doc", @class = "form-control pg-0" })
                    </div>
                    <div class="col-xs-6 pg-0">
                        <span class="col-xs-12">Nom</span>
                        @Html.TextBox("Nom-doc", Model.Humain.Prenom + "_" + Model.Humain.Nom, new { @class = "form-control" })
                    </div>
                    <div class="col-xs-2 pg-0">
                        <span class="col-xs-12">Valider</span>
                        <span onclick="addDoc()" class="col-xs-2 pg-0 w-100">
                            <span class="glyphicon glyphicon-ok btn-plus btn-ok-doc"></span>
                        </span>
                    </div>
                </div>
                @Html.Hidden("CdCandidat-doc", Model.CdCandidat)
            </div>
            @foreach (var item in Model.FichierCandidat)
            {
                <div class="col-xs-12 pg-0">
                    <div class="col-xs-12 text-xs infoFichier">
                        <span class="pull-right">
                            &ensp;dernière modification le @item.DtModification.ToShortDateString()
                        </span>
                    </div>
                    <div class="col-xs-12 pg-0">
                        <div class="col-xs-4">

                            @item.typFichierCandidat.libele
                        </div>
                        <div class="col-xs-4 pg-0">
                            @item.Nom
                        </div>
                        <div class="col-xs-4 pg-0">
                            @Html.ActionLink(" Visionner", "telecharger", "Candidats", new { fileName = item.LienPath }, new { @class = "btn-link link" })
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-xs-12 pg-0 mgb-15">
        <h4 class="col-xs-11 pg-0">Evenement(s)</h4><span onclick="toggleNewEvent()" class="col-xs-1 pg-0"><span id="plus-event" class="glyphicon glyphicon-plus btn-plus"></span></span>
        <div class="col-xs-12 pg-0 event">
            <div id="tog-event" class="col-xs-12 pg-0 newEvent hide-gen">
                <div class="col-xs-12 pg-0">
                    <div class="col-xs-4 col-md-2 pg-0">
                        <span class="col-xs-12">Type </span>
                        @Html.DropDownList("TypEvenement-event", new SelectList(ViewBag.ListeTypEvent, "cdEvenement", "libele"), new { id = "TypEvenement-event", @class = "form-control pg-0" })
                    </div>
                    <div class="col-xs-4 col-md-2 pg-0">
                        <span class="col-xs-12">Par </span>
                        @Html.DropDownList("CdResp-event", new SelectList(ViewBag.ListeResp, "Value", "Text", ViewBag.User), new { id = "CdResp-event", @class = "form-control pg-0" })
                    </div>
                    <div class="col-xs-4 col-md-2 pg-0">
                        <span class="col-xs-12">Le</span>
                        @Html.TextBox("DtEvenement-event", "", new { @class = "form-control" })
                    </div>
                    <div class="col-xs-11 col-md-5 pg-0">
                        <span class="col-xs-12">Commentaire</span>
                        @Html.TextBox("Commentaire-event", "", new { @class = "form-control" })
                    </div>
                    <div class="col-xs-1 pg-0">
                        <span class="col-xs-12">Valider</span>
                        <span onclick="addEvent()" class="col-xs-2 pg-0 w-100">
                            <span class="glyphicon glyphicon-ok btn-plus btn-ok-event"></span>
                        </span>
                    </div>
                </div>
                @Html.Hidden("CdCandidat-event", Model.CdCandidat)
            </div>
            <div class="col-xs-12 pg-0 head-event">
                <span class="col-xs-4 col-md-2">Type</span>
                <span class="col-xs-4 col-md-2">Par</span>
                <span class="col-xs-4 col-md-2">Le</span>
                <span class="hidden-sm col-md-6">Commentaire</span>
            </div>
            @for (int i = 0; i < Model.EvenementCandidat.Count(); i++)
            {
                <div class="col-xs-12 pg-0 row-event">
                    <div class="col-xs-4 col-md-2 pg-0">
                        @Html.DropDownListFor(m => m.EvenementCandidat.ToList()[i].TypEvenement, new SelectList(ViewBag.ListeTypEvent, "cdEvenement", "libele", Model.EvenementCandidat.ToList()[i].TypEvenement), null, htmlAttributes: new { @class = "form-control", Name = "EvenementCandidat[" + i + "].TypEvenement" })
                    </div>
                    <div class="col-xs-4 col-md-2 pg-0">
                        @Html.DropDownListFor(m => m.EvenementCandidat.ToList()[i].CdResp, new SelectList(ViewBag.ListeResp, "Value", "Text", Model.EvenementCandidat.ToList()[i].CdResp), null, htmlAttributes: new { @class = "form-control", Name = "EvenementCandidat[" + i + "].CdResp" })
                    </div>
                    <div class="col-xs-4 col-md-2 pg-0">
                        @Html.EditorFor(m => m.EvenementCandidat.ToList()[i].DtEvenement, new { htmlAttributes = new { @class = "form-control", Name = "EvenementCandidat[" + i + "].DtEvenement" } })
                    </div>
                    <div class="col-xs-12 col-md-6 pg-0">
                        @Html.EditorFor(m => m.EvenementCandidat.ToList()[i].CommentaireEvenement, new { htmlAttributes = new { @class = "form-control", Name = "EvenementCandidat[" + i + "].CommentaireEvenement" } })
                    </div>
                </div>
                @Html.HiddenFor(m => m.EvenementCandidat.ToList()[i].CdCandidat, htmlAttributes: new { Name = "EvenementCandidat[" + i + "].CdCandidat", @Value = Model.CdCandidat })
                @Html.HiddenFor(m => m.EvenementCandidat.ToList()[i].CdEvenement, htmlAttributes: new { Name = "EvenementCandidat[" + i + "].CdEvenement", @Value = Model.EvenementCandidat.ToList()[i].CdEvenement })
                @Html.HiddenFor(m => m.EvenementCandidat.ToList()[i].DtCreation, htmlAttributes: new { Name = "EvenementCandidat[" + i + "].DtCreation", @Value = Model.EvenementCandidat.ToList()[i].DtCreation.Value.ToShortDateString() })
            }
        </div>
    </div>
    @Html.Partial("_headFichePartial")

}
<script type="text/javascript">
    function toggleNewTache() {
        $('#tog-tache').slideToggle(150);
        togPlus($("#plus-tache"))
    }
    function toggleNewDoc() {
        $('#tog-doc').slideToggle(150);
        togPlus($("#plus-doc"))
    }
    function toggleNewEvent() {
        $('#tog-event').slideToggle(150);
        togPlus($("#plus-event"))
    }
    function togPlus(elm) {
        elm.toggleClass(' glyphicon-minus')
            .toggleClass(' glyphicon-plus')
    }
    function addTache() {
        $.ajax(
            {
                type: "POST",
                url: "/Candidats/ajouterTache",
                data: {
                    "tache.CdCandidat": $("#CdCandidat-tache").val(),
                    "tache.CdReceveur": $("#CdReceveur-tache").val(),
                    "tache.DtAction": $("#DtAction-tache").val(),
                    "tache.Details": $("#Details-tache").val()
                },
                success: function (data) {
                    window.location = window.location;
                },
                error: function (e) {
                    console.log(e)
                }
            });
    }
    function addDoc() {
        $.ajax(
            {
                type: "POST",
                url: "/Candidats/ajouterDoc",
                data: {
                    "fichier.CdCandidat": $("#CdCandidat-doc").val(),
                    "fichier.TypFichier": $("#TypFichier-doc").val(),
                    "fichier.Nom": $("#Nom-doc").val(),
                    "fichier.LienPath": $("#LienPath-doc").val()
                },
                success: function (data) {
                    window.location = window.location;
                },
                error: function (e) {
                    console.log(e)
                }
            });
    }
    function addEvent() {
        $.ajax(
            {
                type: "POST",
                url: "/Candidats/ajouterEvent",
                data: {
                    "evenement.CdCandidat": $("#CdCandidat-event").val(),
                    "evenement.CdResp": $("#CdResp-event").val(),
                    "evenement.TypEvenement": $("#TypEvenement-event").val(),
                    "evenement.CommentaireEvenement": $("#Commentaire-event").val(),
                    "evenement.DtEvenement": $("#DtEvenement-event").val()
                },
                success: function (data) {
                    window.location = window.location;
                },
                error: function (e) {
                    console.log(e)
                }
            });
    }
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
